name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-upload-image:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.x
#
#      - name: Install dependencies
#        run: |
#          pip install --upgrade pip
#          pip install -r requirements.txt
#
#      - name: Run unit tests
#        run: python -m pytest python/tests.py

      - name: Build Docker image
        run: docker build -t fibi .
        working-directory: python

      - name: Run the built container to test image, sleep a bit for the webserver to start
        run: docker run -d -p 8000:8000 fibi; sleep 5

      - name: Curl the container and check status
        run: |
          RESPONSE=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8000/?n=10)
          if [[ "$RESPONSE" -eq 200 ]]; then
            echo "HTTP request succeeded with status code 200"
            exit 0  # Success exit code
          else
            echo "HTTP request failed with status code $RESPONSE"
            exit 1  # Failure exit code
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get next version
        uses: reecetech/version-increment@2023.4.1
        id: version
        with:
          scheme: semver
          increment: patch

      - name: Push Docker image as latest + with the new version
        run: |
          docker push dafna/fibi:${{ steps.version.outputs.version }}
          docker push dafna/fibi:latest
#
#      - name: Deploy to Kubernetes
#        env:
#          KUBECONFIG: ${{ secrets.KUBECONFIG_ENCRYPTED }}
#        run: |
#          mkdir -p ~/.kube
#          echo "${{ secrets.KUBECONFIG_ENCRYPTED }}" | base64 -d > ~/.kube/config
#          kubectl config use-context my-local-cluster-context
#          kubectl apply -f path/to/deployment.yaml